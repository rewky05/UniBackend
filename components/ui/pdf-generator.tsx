"use client";

import { useRef } from "react";
import { Button } from "@/components/ui/button";
import { FileText } from "lucide-react";
import { formatDateToText } from "@/lib/utils";
import jsPDF from "jspdf";
import autoTable from "jspdf-autotable";

interface PDFGeneratorProps {
  title: string;
  subtitle?: string;
  data: any[];
  columns: {
    key: string;
    label: string;
    render?: (item: any) => React.ReactNode;
    width?: number;
  }[];
  filters?: {
    label: string;
    value: string;
  }[];
  onGenerate?: () => void;
  className?: string;
  filename?: string;
}

export function PDFGenerator({
  title,
  subtitle,
  data,
  columns,
  filters = [],
  onGenerate,
  className = "",
  filename
}: PDFGeneratorProps) {
  const generatePDF = () => {
    // Safety check for SSR
    if (typeof window === 'undefined') return;
    
    if (onGenerate) {
      onGenerate();
    }

    try {
      // Create new PDF document
      const pdf = new jsPDF('landscape', 'mm', 'a4');
      
      // Set document properties
      pdf.setProperties({
        title: title,
        subject: subtitle || 'Generated Report',
        author: 'UniHealth Admin Portal',
        creator: 'UniHealth Admin Portal'
      });

      // Add header
      pdf.setFontSize(20);
      pdf.setFont('helvetica', 'bold');
      pdf.text(title, 14, 20);

      if (subtitle) {
        pdf.setFontSize(12);
        pdf.setFont('helvetica', 'normal');
        pdf.text(subtitle, 14, 30);
      }

      // Add generation info
      pdf.setFontSize(10);
      pdf.setFont('helvetica', 'italic');
      pdf.text(`Generated: ${formatDateToText(new Date().toISOString())}`, 14, 40);
      pdf.text(`Total Records: ${data.length}`, 14, 45);

      // Add filters info if any
      if (filters.length > 0) {
        const filterText = filters.map(f => `${f.label}: ${f.value}`).join(' | ');
        pdf.text(`Filters: ${filterText}`, 14, 50);
      }

      // Prepare table data
      const tableData = data.map(item => 
        columns.map(col => {
          if (col.render) {
            // For custom rendered content, we need to extract text
            const rendered = col.render(item);
            if (typeof rendered === 'string') {
              return rendered;
            } else if (rendered && typeof rendered === 'object' && 'props' in rendered) {
              // Handle React elements - extract text content
              return extractTextFromReactElement(rendered);
            }
            return 'N/A';
          }
          return item[col.key] || 'N/A';
        })
      );

      // Prepare table headers
      const tableHeaders = columns.map(col => col.label);

      // Generate table
      autoTable(pdf, {
        head: [tableHeaders],
        body: tableData,
        startY: 60,
        styles: {
          fontSize: 8,
          cellPadding: 2,
          lineColor: [200, 200, 200],
          lineWidth: 0.1,
        },
        headStyles: {
          fillColor: [66, 139, 202],
          textColor: 255,
          fontStyle: 'bold',
        },
        alternateRowStyles: {
          fillColor: [245, 245, 245],
        },
        columnStyles: {
          0: { cellWidth: 25 }, // ID column
        },
        didDrawPage: function (data) {
          // Add page numbers
          pdf.setFontSize(8);
          pdf.text(
            `Page ${pdf.getCurrentPageInfo().pageNumber} of ${pdf.getNumberOfPages()}`,
            pdf.internal.pageSize.width - 20,
            pdf.internal.pageSize.height - 10
          );
        },
      });

      // Add footer
      const pageCount = pdf.getNumberOfPages();
      for (let i = 1; i <= pageCount; i++) {
        pdf.setPage(i);
        pdf.setFontSize(8);
        pdf.setFont('helvetica', 'italic');
        pdf.text(
          'Generated by UniHealth Admin Portal',
          14,
          pdf.internal.pageSize.height - 10
        );
      }

      // Generate filename
      const defaultFilename = `${title.toLowerCase().replace(/\s+/g, '_')}_${formatDateToText(new Date().toISOString()).replace(/\s+/g, '_')}.pdf`;
      const finalFilename = filename || defaultFilename;

      // Create blob and open in new tab
      const pdfBlob = pdf.output('blob');
      const pdfUrl = URL.createObjectURL(pdfBlob);
      
      const newWindow = window.open(pdfUrl, '_blank');
      if (newWindow) {
        newWindow.focus();
      }

      // Clean up the URL object after a delay
      setTimeout(() => {
        URL.revokeObjectURL(pdfUrl);
      }, 1000);

    } catch (error) {
      console.error('Error generating PDF:', error);
      // You could add a toast notification here if needed
    }
  };

  // Helper function to extract text from React elements
  const extractTextFromReactElement = (element: any): string => {
    if (typeof element === 'string') {
      return element;
    }
    
    if (element && typeof element === 'object') {
      if (element.props && element.props.children) {
        if (Array.isArray(element.props.children)) {
          return element.props.children.map(extractTextFromReactElement).join(' ');
        } else {
          return extractTextFromReactElement(element.props.children);
        }
      }
      
      if (element.props && element.props.className && element.props.className.includes('badge')) {
        // Handle badge styling
        const badgeText = extractTextFromReactElement(element.props.children);
        return badgeText;
      }
    }
    
    return 'N/A';
  };

  return (
    <div className={className}>
      <Button
        onClick={generatePDF}
        variant="outline"
        size="sm"
        className="flex items-center gap-2"
      >
        <FileText className="h-4 w-4" />
        Generate PDF Report
      </Button>
    </div>
  );
}
