"use client";

import { useRef } from "react";
import { Button } from "@/components/ui/button";
import { Printer, Download } from "lucide-react";
import { formatDateToText } from "@/lib/utils";

interface PrintViewProps {
  title: string;
  subtitle?: string;
  data: any[];
  columns: {
    key: string;
    label: string;
    render?: (item: any) => React.ReactNode;
  }[];
  filters?: {
    label: string;
    value: string;
  }[];
  onPrint?: () => void;
  className?: string;
}

export function PrintView({
  title,
  subtitle,
  data,
  columns,
  filters = [],
  onPrint,
  className = ""
}: PrintViewProps) {
  const printRef = useRef<HTMLDivElement>(null);

  const handlePrint = () => {
    if (onPrint) {
      onPrint();
    }
    
    const printWindow = window.open('', '_blank');
    if (!printWindow) return;

    const printContent = printRef.current?.innerHTML;
    if (!printContent) return;

    const printStyles = `
      <style>
        @media print {
          @page {
            margin: 0.5in;
            size: A4 landscape;
          }
        }
        
        body {
          font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
          margin: 0;
          padding: 0;
          color: #333;
          background: white;
        }
        
        .print-header {
          text-align: center;
          margin-bottom: 2rem;
          border-bottom: 2px solid #333;
          padding-bottom: 1rem;
        }
        
        .print-title {
          font-size: 24px;
          font-weight: bold;
          margin: 0 0 0.5rem 0;
          color: #1a1a1a;
        }
        
        .print-subtitle {
          font-size: 14px;
          color: #666;
          margin: 0 0 1rem 0;
        }
        
        .print-table {
          width: 100%;
          border-collapse: collapse;
          margin-top: 1rem;
          font-size: 11px;
        }
        
        .print-table th {
          background: #f8f9fa;
          border: 1px solid #dee2e6;
          padding: 6px 8px;
          text-align: left;
          font-weight: 600;
          color: #495057;
        }
        
        .print-table td {
          border: 1px solid #dee2e6;
          padding: 6px 8px;
          vertical-align: top;
        }
        
        .print-table tr:nth-child(even) {
          background: #f8f9fa;
        }
        
        .print-footer {
          margin-top: 2rem;
          text-align: center;
          font-size: 10px;
          color: #666;
          border-top: 1px solid #dee2e6;
          padding-top: 1rem;
        }
        
        .print-stats {
          margin-bottom: 1rem;
          font-size: 12px;
          color: #666;
        }
        
        .badge {
          display: inline-block;
          padding: 2px 6px;
          border-radius: 4px;
          font-size: 10px;
          font-weight: 500;
        }
        
        .badge-success {
          background: #d4edda;
          color: #155724;
        }
        
        .badge-warning {
          background: #fff3cd;
          color: #856404;
        }
        
        .badge-danger {
          background: #f8d7da;
          color: #721c24;
        }
        
        .badge-info {
          background: #d1ecf1;
          color: #0c5460;
        }
        
        .avatar {
          display: inline-flex;
          align-items: center;
          justify-content: center;
          width: 24px;
          height: 24px;
          border-radius: 50%;
          background: #e9ecef;
          color: #495057;
          font-size: 10px;
          font-weight: 500;
        }
      </style>
    `;

    const printDocument = `
      <!DOCTYPE html>
      <html>
        <head>
          <title>${title}</title>
          ${printStyles}
        </head>
        <body>
          <div class="print-header">
            <h1 class="print-title">${title}</h1>
            ${subtitle ? `<p class="print-subtitle">${subtitle}</p>` : ''}
            <div class="print-stats">
              Total Records: ${data.length} | Generated: ${formatDateToText(new Date().toISOString())}
            </div>
          </div>
          
          <table class="print-table">
            <thead>
              <tr>
                ${columns.map(col => `<th>${col.label}</th>`).join('')}
              </tr>
            </thead>
            <tbody>
              ${data.map((item, index) => `
                <tr>
                  ${columns.map(col => `
                    <td>${col.render ? col.render(item) : (item[col.key] || 'N/A')}</td>
                  `).join('')}
                </tr>
              `).join('')}
            </tbody>
          </table>
          
          <div class="print-footer">
            <p>Generated by UniHealth Admin Portal | ${formatDateToText(new Date().toISOString())}</p>
          </div>
        </body>
      </html>
    `;

    printWindow.document.write(printDocument);
    printWindow.document.close();
    printWindow.focus();
    
    setTimeout(() => {
      printWindow.print();
      printWindow.close();
    }, 100);
  };

  return (
    <div className={className}>
      <Button
        onClick={handlePrint}
        variant="outline"
        size="sm"
        className="flex items-center gap-2"
      >
        <Printer className="h-4 w-4" />
        Print Report
      </Button>
      
      {/* Hidden print content for reference */}
      <div ref={printRef} className="hidden">
        <div className="print-header">
          <h1 className="print-title">{title}</h1>
          {subtitle && <p className="print-subtitle">{subtitle}</p>}
          <div className="print-stats">
            Total Records: {data.length} | Generated: {formatDateToText(new Date().toISOString())}
          </div>
        </div>
        
        <table className="print-table">
          <thead>
            <tr>
              {columns.map((col, index) => (
                <th key={index}>{col.label}</th>
              ))}
            </tr>
          </thead>
          <tbody>
            {data.map((item, index) => (
              <tr key={index}>
                {columns.map((col, colIndex) => (
                  <td key={colIndex}>
                    {col.render ? col.render(item) : (item[col.key] || 'N/A')}
                  </td>
                ))}
              </tr>
            ))}
          </tbody>
        </table>
        
        <div className="print-footer">
          <p>Generated by UniHealth Admin Portal | {formatDateToText(new Date().toISOString())}</p>
        </div>
      </div>
    </div>
  );
} 